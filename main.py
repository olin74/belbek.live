# coder: Olin (telegram: @whitejoe)
# use for free
# donate bitcoin: 1MFy9M3g6nxFeg8X1GDYabMtYaiuRcYJPT

import json
import math
import redis
import telebot
from telebot import types
import time
import re
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_LIST = [665812965]  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–ø–µ—Ü –∫–æ–º–∞–Ω–¥ (—Ç—É—Ç —Ç–æ–ª—å–∫–æ –û–ª–∏–Ω)
ABOUT_LIMIT = 100  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
DESCRIPTION_LIMIT = 600  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö
PRICE_LIMIT = 25  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ü–µ–Ω–µ
LIST_STEP = 10  # –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∑–∞ 1 —Ä–∞–∑
TIME_OUT_USER = 30 * 30 * 24 * 30  # –í—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –µ–≥–æ –º–µ—Ç–æ–∫
CONTENT_TYPES = ["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice", "location", "contact",
                 "new_chat_members", "left_chat_member", "new_chat_title", "new_chat_photo", "delete_chat_photo",
                 "group_chat_created", "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                 "migrate_from_chat_id", "pinned_message"]


# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
def get_distance(long1, lat1, long2, lat2):
    # –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    def hav(x):
        return (math.sin(x / 2)) ** 2

    # –†–∞–¥–∏—É—Å —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã –≤ –∫–º, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.5%
    planet_radius = 6371  # –ó–µ–º–ª—è 6371, –ú–∞—Ä—Å 3380
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
    long1_rad = math.pi * long1 / 180
    lat1_rad = math.pi * lat1 / 180
    long2_rad = math.pi * long2 / 180
    lat2_rad = math.pi * lat2 / 180
    # –ú–Ω–æ–≥–æ –≥–µ–æ–º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ—è—Å–Ω—è—Ç—å –Ω–µ –±—É–¥—É.
    res = 2 * planet_radius * math.asin(math.sqrt(hav(long2_rad - long1_rad) + math.cos(long1_rad) *
                                                  math.cos(long1_rad) * hav(lat2_rad - lat1_rad)))
    return res


class Live:
    def __init__(self):

        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        redis_url = os.environ['REDIS_URL_LIVE']
        redis_url_labels = os.environ['REDIS_URL_LABELS']
        # redis_url_events = os.environ['REDIS_URL_EVENTS']
        # redis_url = 'redis://:@localhost:6379'  # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users = {'wait': redis.from_url(redis_url, db=1),
                      'status': redis.from_url(redis_url, db=2),
                      'geo_long': redis.from_url(redis_url, db=3),
                      'geo_lat': redis.from_url(redis_url, db=4),
                      'category': redis.from_url(redis_url, db=5),
                      'subcategory': redis.from_url(redis_url, db=6),
                      'name': redis.from_url(redis_url, db=7),
                      'username': redis.from_url(redis_url, db=8),
                      'search': redis.from_url(redis_url, db=9),
                      # 'labels': redis.from_url(redis_url, db=10),
                      'last_login': redis.from_url(redis_url, db=11)
                      }

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        self.labels = {'about': redis.from_url(redis_url_labels, db=1),
                       'description': redis.from_url(redis_url_labels, db=2),
                       'photos': redis.from_url(redis_url_labels, db=3),
                       'price': redis.from_url(redis_url_labels, db=4),
                       'subcategory': redis.from_url(redis_url_labels, db=5),
                       'tags': redis.from_url(redis_url_labels, db=6),
                       'status_label': redis.from_url(redis_url_labels, db=7),
                       'geo_long': redis.from_url(redis_url_labels, db=8),
                       'geo_lat': redis.from_url(redis_url_labels, db=9),
                       'views': redis.from_url(redis_url_labels, db=10),
                       'author': redis.from_url(redis_url_labels, db=11),
                       'zoom': redis.from_url(redis_url_labels, db=12)
                       }

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        # self.events =

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –º–µ—Ç–æ–∫
        self.common = redis.from_url(redis_url, db=0)
        if "index" not in self.common:
            index = 0
            for k in self.labels['status_label'].keys():
                index = k
            self.common['index'] = index

        # –ü–æ–¥–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        with open("categories.json") as json_file:
            self.categories = json.load(json_file)

        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        self.menu_items = [f'–ï—â–µ {LIST_STEP}', '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', '–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                           '–ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Ç–æ–∫']
        self.menu_labels = ['–í—ã—Ö–æ–¥', "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Ç–∫–∞?", "–ú–æ–∏ –º–µ—Ç–∫–∏", "‚ú≥Ô∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É ‚ú≥Ô∏è"]
        self.menu_edit_label = ['–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É',
                                '–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—Ü–∏–∏', '–°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                                '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ']
        # –ß–∏—Å—Ç–∫–∞ –±–∞–∑—ã
        for field in self.labels:
            for key in self.labels[field].keys():
                if key not in self.labels['status_label'].keys():
                    self.labels[field].delete(key)
        for label_id in self.labels['status_label'].keys():
            user_id = int(self.labels['author'][label_id])
            if int(self.users['last_login'][user_id]) < int(time.time()) - TIME_OUT_USER:
                self.labels['status_label'][label_id] = 0

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    def go_start(self, bot, message, is_start=True):
        user_id = message.chat.id
        menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        # –ï—Å–ª–∏ –ø–æ–∏—Å–∫
        first_row = []
        if user_id in self.users['search']:
            first_row.append(types.KeyboardButton(text=self.menu_items[0]))
        first_row.append(types.KeyboardButton(text=self.menu_items[1], request_location=True))
        menu_keyboard.row(*first_row)

        second_row = [types.KeyboardButton(text=self.menu_items[2])]
        if user_id in self.users['category']:
            second_row.append(types.KeyboardButton(text=self.menu_items[3]))

        second_row.append(types.KeyboardButton(text=self.menu_items[4]))
        menu_keyboard.row(*second_row)
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        self.users['status'][user_id] = -1
        self.users['wait'][user_id] = 0
        self.users['last_login'][user_id] = int(time.time())
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        active = 0
        for label_id in self.labels['status_label'].keys():
            if int(self.labels['status_label'][label_id]) == 1:
                active += 1
        menu_message = ""
        if is_start:
            menu_message = f"–û–±—ä—è–≤–ª–µ–Ω–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {active}\n" \
                           f"üîé –î–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ù–æ–≤—ã–π –ø–æ–∏—Å–∫‚Äù " \
                           f"(–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–æ)" \
                           f" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º.\n" \
                           f"–ö–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ https://t.me/BelbekLive\n"
        mess_cat = "–í—Å–µ"
        if user_id in self.users['category']:
            mess_cat = self.users['category'][user_id].decode('utf-8')
        menu_message = menu_message + f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞: {mess_cat}"
        if user_id in self.users['category']:
            mess_cat = "–í—Å–µ"
            if user_id in self.users['subcategory']:
                mess_cat = self.users['subcategory'][user_id].decode('utf-8')
            menu_message = menu_message + f"\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞: {mess_cat}"
        bot.send_message(message.chat.id, menu_message, reply_markup=menu_keyboard, disable_web_page_preview=True)

    # –ó–∞–ø—Ä–æ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    def go_about(self, bot, message, label_id):
        keyboard = types.ReplyKeyboardRemove()
        user_id = message.chat.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—è "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        self.users['wait'][user_id] = 1
        self.users['status'][user_id] = label_id
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ (–Ω–µ –±–æ–ª—å—à–µ {ABOUT_LIMIT}"
                                          f" —Å–∏–º–≤–æ–ª–æ–≤), –Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Äú–°–ø–æ—Ç. –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –ø—Ä–æ—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä.‚Äù",
                         reply_markup=keyboard)
        return

    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
    def go_description(self, bot, message, label_id):
        keyboard = types.ReplyKeyboardRemove()
        user_id = message.chat.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—è "–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
        self.users['wait'][user_id] = 2
        self.users['status'][user_id] = label_id
        bot.send_message(message.chat.id, f"üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ "
                                          f"(–Ω–µ –±–æ–ª—å—à–µ {DESCRIPTION_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤)",
                         reply_markup=keyboard)
        return

    # –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã
    def go_price(self, bot, message, label_id):
        keyboard = types.ReplyKeyboardRemove()
        user_id = message.chat.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—è "—Ü–µ–Ω–∞"
        self.users['wait'][user_id] = 4
        self.users['status'][user_id] = label_id
        bot.send_message(message.chat.id,
                         f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–Ω–µ –±–æ–ª—å—à–µ {PRICE_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤), –Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Äú–æ—Ç 300 —Ä—É–±–ª–µ–π/—Å—É—Ç–∫–∏‚Äù",
                         reply_markup=keyboard)
        return

    # –ü–æ—Å–ª–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –º–µ—Ç–∫—É
    def send_label(self, bot, message, label_id, dist=None):
        keyboard = types.InlineKeyboardMarkup()
        status_indicator = "‚ú≥Ô∏è"
        if int(self.labels['status_label'][label_id]) == 0:
            status_indicator = "‚ú¥Ô∏è"
        label_text = f"{status_indicator} {self.labels['about'][label_id].decode('utf-8')}"
        if label_id in self.labels['price']:
            label_text = label_text + f"\nüí∞ {self.labels['price'][label_id].decode('utf-8')}"
        a_id = int(self.labels['author'][label_id])
        username = self.users['username'][a_id].decode('utf-8')
        if dist is not None:
            dist_km = dist / 1000
            label_text = label_text + f"\nüöô {dist_km:.2f} –∫–º"
        label_text = label_text + f"\nüí¨ @{username}"
        key_text = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        user_id = message.chat.id
        if a_id == user_id and int(self.users['status'][user_id]) >= 0:
            key_text = "–ò–∑–º–µ–Ω–∏—Ç—å"
        keyboard.add(types.InlineKeyboardButton(text=key_text, callback_data=f"show_{label_id}"))
        bot.send_message(message.chat.id, label_text, reply_markup=keyboard)
        return

    def my_list(self, user_id):
        result = []
        for label_id in self.labels['status_label'].keys():
            if int(user_id) == int(self.labels['author'][label_id]):
                result.append(int(label_id))
        return result

    # –í—ã—è–≤–∏—Ç—å –ø–µ—Ä–µ–∫—Ä–µ—Å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    def uni_cat(self, orig_label_id, user_id):
        c_list = json.loads(self.labels['subcategory'][orig_label_id].decode('utf-8'))
        l_list = self.my_list(user_id)
        cross_cat = []
        for label_id in l_list:
            if int(self.labels['status_label'][label_id]) == 1 and label_id != orig_label_id:
                cat_list = json.loads(self.labels['subcategory'][label_id].decode('utf-8'))
                for cat in cat_list:
                    if cat in c_list:
                        cross_cat.append(cat)
        return cross_cat

    # –ü–æ—Å–ª–∞—Ç—å –ø–æ–ª–Ω—É—é –º–µ—Ç–∫—É
    def send_full_label(self, bot, message, label_id, is_edit=False):
        if label_id not in self.labels['about']:
            self.go_about(bot, message, label_id)
            return
        if label_id not in self.labels['subcategory']:
            self.go_cat(bot, message, label_id)
            return
        c_list = json.loads(self.labels['subcategory'][label_id].decode('utf-8'))
        if len(c_list) == 0:
            self.go_cat(bot, message, label_id)
            return
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        user_id = message.chat.id
        status_indicator = "‚ú≥Ô∏è"
        if int(self.labels['status_label'][label_id]) == 0:
            status_indicator = "‚ú¥Ô∏è"
        label_text = f"‚Ññ{label_id} {status_indicator} {self.labels['about'][label_id].decode('utf-8')}"
        if label_id in self.labels['description']:
            label_text = label_text + f"\nüìù {self.labels['description'][label_id].decode('utf-8')}"
        if label_id in self.labels['price']:
            label_text = label_text + f"\nüí∞ {self.labels['price'][label_id].decode('utf-8')}"
        label_text = label_text + f"\nüìí {','.join(c_list)}"
        label_text = label_text + f"\nüëÄ {int(self.labels['views'][label_id])} –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        a_id = int(self.labels['author'][label_id])
        username = self.users['username'][a_id].decode('utf-8')
        label_text = label_text + f"\nüí¨ @{username}"
        cross = self.uni_cat(label_id, user_id)
        if len(cross) > 0 and int(self.labels['status_label'][label_id]) == 1:
            self.labels['status_label'][label_id] = 0
        button_list = []
        if int(self.users['status'][user_id]) < 0 or int(self.labels['author'][label_id]) != user_id:
            button_list.append(types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data=f"geo_{label_id}"))
        else:
            button_list.append(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"abo_{label_id}"))
            button_list.append(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"des_{label_id}"))
            button_list.append(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"pri_{label_id}"))
            button_list.append(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"cat_{label_id}"))
            if int(self.labels['status_label'][label_id]) == 0:
                if len(cross) == 0:
                    label_text = label_text + f"\n–û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–Ω—è—Ç—ã–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É–¥–∞–ª—è—é—Ç—Å—è —Å–ø—É—Å—Ç—è —Å—É—Ç–∫–∏"
                    button_list.append(types.InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"pub_{label_id}"))
                else:
                    label_text = label_text + f"\n\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–≤–µ –º–µ—Ç–∫–∏ –≤ –æ–¥–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏." \
                                              f" –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å –∑–¥–µ—Å—å: {','.join(cross)}"
            if int(self.labels['status_label'][label_id]) == 1:
                button_list.append(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{label_id}"))
        keyboard.add(*button_list)
        if is_edit:
            bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                                  text=label_text, reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, label_text, reply_markup=keyboard)

    # –ú–æ–∏ –º–µ—Ç–∫–∏
    def my_labels(self, bot, message):
        user_id = message.chat.id
        user_labels = self.my_list(user_id)
        self.users['status'][user_id] = 0
        for user_label_id in user_labels:
            self.send_label(bot, message, int(user_label_id))
        self.go_menu_labels(bot, message)

    # –ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ—Ç–æ–∫
    def go_menu_labels(self, bot, message):
        user_id = message.chat.id
        menu_label_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)

        label_id = int(self.users['status'][user_id])
        # –°–æ—Ö—Ä–∞–Ω–∏–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if message.chat.username is not None:
            self.users['username'][user_id] = message.chat.username
        # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        name = ""
        if message.chat.first_name is not None:
            name = name + message.chat.first_name
        if message.chat.last_name is not None:
            name = name + " " + message.chat.last_name
        self.users['name'][user_id] = name

        if label_id > 0:
            self.send_full_label(bot, message, int(label_id))
            if int(self.users['wait'][user_id]) > 0:
                return

        menu_label_keyboard.row(types.KeyboardButton(text=self.menu_labels[0]),
                                types.KeyboardButton(text=self.menu_labels[1]),
                                types.KeyboardButton(text=self.menu_labels[2]))
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω username —Ç–æ –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É
        menu_label_text = f"‚ÄºÔ∏è –ó–∞–¥–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Telegram, —á—Ç–æ –±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ç–∫–∏ ‚ÄºÔ∏è"
        if message.chat.username is not None:
            menu_label_keyboard.row(types.KeyboardButton(text=self.menu_labels[3], request_location=True))
            menu_label_text = f"–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é."

        bot.send_message(message.chat.id, menu_label_text, reply_markup=menu_label_keyboard)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞
    def get_search_list(self, message, location):
        user_id = message.chat.id
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏
        geo = {}
        for label_id in self.labels['status_label'].keys():

            # –ù–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã–µ
            if int(self.labels['status_label'][label_id]) == 1:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç–∫–∏
                user_subcategories = []
                if user_id in self.users['category']:
                    user_category = self.users['category'][user_id].decode('utf-8')
                    user_subcategories = self.categories[user_category]
                    if user_id in self.users['subcategory']:
                        user_subcategory = self.users['subcategory'][user_id].decode('utf-8')
                        user_subcategories = [user_subcategory]
                if len(user_subcategories) > 0:
                    label_subcategories = json.loads(self.labels['subcategory'][label_id].decode('utf-8'))
                    cont = False
                    for sub in label_subcategories:
                        if sub in user_subcategories:
                            cont = True
                            break
                    if not cont:
                        continue

                dist = get_distance(location['longitude'], location['latitude'],
                                    float(self.labels['geo_long'][label_id]),
                                    float(self.labels['geo_lat'][label_id]))
                # –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —Ä—è–¥–æ–º, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
                geo[int(label_id)] = dist
        sorted_list = sorted(geo, key=geo.get)
        result = []
        for key in sorted_list:
            result.append(key)
            result.append(int(geo[key]*1000))
        return result

    # –í—ã–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    def go_search(self, bot, message):
        user_id = message.chat.id
        s_list = json.loads(self.users['search'][user_id].decode('utf-8'))
        s_len = len(s_list)
        if s_len == 0:
            m_text = "ü§∑‚Äç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –Ω–∞–ø–æ–ª–Ω—è—Ç—å—Å—è."
        else:
            m_text = f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–∫: {s_len // 2}"
        bot.send_message(message.chat.id, m_text)
        for i in range(LIST_STEP):
            if len(s_list) == 0:
                break
            label_id = int(s_list[0])
            self.labels['views'][label_id] = int(self.labels['views'][label_id]) + 1
            dist = int(s_list[1])
            self.send_label(bot, message, label_id, dist)
            del s_list[0]
            del s_list[0]
        if len(s_list) == 0:
            self.users['search'].delete(user_id)
        else:
            self.users['search'][user_id] = json.dumps(s_list)

    # –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–º –∏–ª–∏ –∏–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    def go_location(self, bot, message, location):
        user_id = message.chat.id
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≥–æ —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∏—Å–∫–∞—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É
        if int(self.users['status'][user_id]) == 0:  # –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É
            if user_id in self.users['username']:
                # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∫—É
                index = int(self.common['index']) + 1
                self.common['index'] = index
                self.labels['status_label'].setex(index, 86400, 0)
                self.labels['views'][index] = 0
                self.labels['geo_long'][index] = location['longitude']
                self.labels['geo_lat'][index] = location['latitude']
                self.labels['author'][index] = user_id
                self.users['status'][user_id] = index
                self.go_menu_labels(bot, message)

        elif int(self.users['status'][user_id]) < 0:  # –ü–æ–∏—Å–∫
            self.users['search'][user_id] = json.dumps(self.get_search_list(message, location))
            self.go_search(bot, message)
            self.go_start(bot, message, False)

    def select_cat(self, bot, message):
        keyboard = types.InlineKeyboardMarkup()

        for cat in self.categories.keys():
            keyboard.row(types.InlineKeyboardButton(text=cat, callback_data=f"ucat_{cat}"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    def select_sub(self, bot, message):
        keyboard = types.InlineKeyboardMarkup()
        user_id = message.chat.id
        cat = self.users['category'][user_id].decode('utf-8')
        for sub in self.categories[cat]:
            keyboard.row(types.InlineKeyboardButton(text=sub, callback_data=f"usub_{sub}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    def go_cat(self, bot, message, first=True):
        keyboard = types.InlineKeyboardMarkup()
        user_id = message.chat.id
        self.users['wait'][user_id] = 5

        orig_label_id = int(self.users['status'][user_id])

        l_list = self.my_list(user_id)
        st_list = []
        for label_id in l_list:
            if int(self.labels['status_label'][label_id]) == 1 and label_id != orig_label_id:
                cat_list = json.loads(self.labels['subcategory'][label_id].decode('utf-8'))
                for cat in cat_list:
                    st_list.append(cat)

        label_id = int(self.users['status'][user_id])
        if label_id not in self.labels['subcategory']:
            self.labels['subcategory'][label_id] = '[]'
        label_cats = json.loads(self.labels['subcategory'][label_id].decode('utf-8'))
        for cat, sub_list in self.categories.items():
            for sub in sub_list:
                pre = ""
                call_st = f"lcat_{sub}"
                if sub in label_cats:
                    pre = "‚úÖ "
                elif sub in st_list:
                    pre = "üö´ "
                    call_st = "none"
                keyboard.row(types.InlineKeyboardButton(text=f"{pre}{cat}: {sub}", callback_data=call_st))
        keyboard.row(types.InlineKeyboardButton(text=f"–ì–æ—Ç–æ–≤–æ", callback_data=f"done"))
        m_text = "–°–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:"
        if first:
            bot.send_message(message.chat.id, m_text,
                             reply_markup=keyboard)
        else:
            bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                                  text=m_text, reply_markup=keyboard)

    def deploy(self):
        bot = telebot.TeleBot(os.environ['TELEGRAM_TOKEN_LIVE'])

        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        @bot.message_handler(commands=['start'])
        def start_message(message):
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

            self.go_start(bot, message)

        # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        @bot.message_handler(commands=['geo'])
        def geo_message(message):
            try:
                long1 = float(message.text.split(' ')[1])
                lat1 = float(message.text.split(' ')[2])
                long2 = float(message.text.split(' ')[3])
                lat2 = float(message.text.split(' ')[4])
                dist = get_distance(long1, lat1, long2, lat2)
                bot.send_message(message.chat.id, f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {dist} –∫–º")
            except Exception as e:
                bot.send_message(message.chat.id, f"%USERNAME% –∫–∞–∫–±–µ –æ—à–∏–±—Å–æ {e}")

        # –í—ã–≤–æ–¥ –∞–¥–º–∏–Ω—É —Å–ø–∏—Å–∫–∞ –ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º
        @bot.message_handler(commands=['list'])
        def list_message(message):
            if message.chat.id in ADMIN_LIST:
                me = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - –∏–º—è - –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥):\n"
                for user_id in self.users['name'].keys():
                    me = me + f"{user_id.decode('utf-8')} - {self.users['name'][user_id].decode('utf-8')}" \
                              f" - {time.ctime(int(self.users['last_login'][user_id]))}\n"
                bot.send_message(message.chat.id, me)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        @bot.message_handler(content_types=['text'])
        def message_text(message):
            user_id = message.chat.id

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω—è—é –æ–ø–∏—Å–∞–Ω–∏–µ
            if int(self.users['wait'][user_id]) == 1 and int(self.users['status'][user_id]) > 0:
                if len(message.text) <= ABOUT_LIMIT:
                    label_id = int(self.users['status'][user_id])
                    self.labels['about'][label_id] = message.text
                    self.users['wait'][user_id] = 0
                    self.go_menu_labels(bot, message)
                    return
                else:
                    bot.send_message(message.chat.id, f"‚ÄºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {ABOUT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤")
                    return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω—è—é –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
            if int(self.users['wait'][user_id]) == 2 and int(self.users['status'][user_id]) > 0:
                if len(message.text) <= DESCRIPTION_LIMIT:
                    label_id = int(self.users['status'][user_id])
                    self.labels['description'][label_id] = message.text
                    self.users['wait'][user_id] = 0
                    self.go_menu_labels(bot, message)
                    return
                else:
                    bot.send_message(message.chat.id,
                                     f"‚ÄºÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {DESCRIPTION_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω—è—é —Ü–µ–Ω—É
            if int(self.users['wait'][user_id]) == 4 and int(self.users['status'][user_id]) > 0:
                if len(message.text) <= PRICE_LIMIT:
                    label_id = int(self.users['status'][user_id])
                    self.labels['price'][label_id] = message.text
                    self.users['wait'][user_id] = 0
                    self.go_menu_labels(bot, message)
                    return
                else:
                    bot.send_message(message.chat.id,
                                     f"‚ÄºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {PRICE_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤")
                    return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Ç–æ–∫"
            if message.text == self.menu_items[4] and int(self.users['status'][user_id]) < 0:
                self.users['status'][user_id] = 0
                if user_id in self.users['search']:
                    self.users['search'].delete(user_id)
                self.go_menu_labels(bot, message)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã—Ö–æ–¥"
            if message.text == self.menu_labels[0]:
                self.users['status'][user_id] = -1
                self.users['wait'][user_id] = 0
                if user_id in self.users['category']:
                    self.users['category'].delete(user_id)
                if user_id in self.users['subcategory']:
                    self.users['subcategory'].delete(user_id)
                self.go_start(bot, message)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Ç–∫–∞?"
            if message.text == self.menu_labels[1]:
                wtf_label = "–ú–µ—Ç–∫–∞ - —ç—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è" \
                            " –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥." \
                            " –ù–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ö–ª–µ–±–∞, —Å–¥–∞–≤–∞–µ–º–∞—è –≤ –∞—Ä–µ–Ω–¥—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å," \
                            " —Å—Ç—É–¥–∏—è –º–∞—Å—Å–∞–∂–∞, –∏–ª–∏, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É" \
                            " –≤–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –¥–æ–ª–∏–Ω–µ, –º–µ—Å—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –≠—Ç–∞ —Ç–æ—á–∫–∞ –±—É–¥–µ—Ç" \
                            " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –≤–∞–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" \
                            " –æ —Ç–æ–º, –∏–∑ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –¥–æ–ª–∏–Ω—ã –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞." \
                            " –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –º–µ—Ç–∫—É –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞" \
                            " –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É', —Ç–æ–≥–¥–∞ –º–µ—Ç–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å" \
                            " (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞). –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É –≤ –¥—Ä—É–≥–æ–º" \
                            " –º–µ—Å—Ç–µ, —Ç–æ –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)." \
                            " –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ, —É–∫–∞–∂–∏—Ç–µ" \
                            " –Ω–∞–∑–∞–≤–Ω–∏–µ –∏ –¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–∫–∏. –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)," \
                            " –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞—à–∞ –º–µ—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–µ—Ä–≤–∏—Å–∞." \
                            " –í –∫–∞–∂–¥–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –º–µ—Ç–∫–∏. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏ –≤—ã" \
                            " –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, —Ç–∞–∫–∏–µ –∫–∞–∫ '–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ' –∏–ª–∏ '—Ü–µ–Ω–∞'. –î–∞–ª–µ–µ" \
                            " –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ—Ç–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏" \
                            " —Å–Ω–∏–º–∏–µ –µ—ë —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–Ω–∞ —É–¥–∞–ª–∏—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏."
                bot.send_message(message.chat.id, wtf_label)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –º–µ—Ç–∫–∏"
            if message.text == self.menu_labels[2]:
                self.my_labels(bot, message)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            if message.text == self.menu_items[2] and int(self.users['status'][user_id]) < 0:
                self.select_cat(bot, message)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            if message.text == self.menu_items[3] and int(self.users['status'][user_id]) < 0:
                if user_id in self.users['category']:
                    self.select_sub(bot, message)
                    return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ï—â–µ"
            if message.text == self.menu_items[0] and int(self.users['status'][user_id]) < 0:
                self.go_search(bot, message)
                self.go_start(bot, message, False)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–∫—Å—Ç–æ–º
            if re.fullmatch("^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$", message.text):
                location = {'longitude': float(message.text.split(',')[0]),
                            'latitude': float(message.text.split(',')[1])}
                self.go_location(bot, message, location)
                return
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–æ—à–µ–¥—à–∏—Ö –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        @bot.message_handler(content_types=['location'])
        def message_geo(message):
            location = {'longitude': message.location.longitude, 'latitude': message.location.latitude}
            self.go_location(bot, message, location)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π  –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–µ –ø–æ–¥–æ—à–µ–¥—à–∏—Ö –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–µ
        @bot.message_handler(content_types=CONTENT_TYPES)
        def message_any(message):
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        @bot.callback_query_handler(func=lambda call: True)
        def callback_worker(call):
            user_id = call.message.chat.id

            # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
            if call.data[:4] == "ucat":
                category = call.data.split('_')[1]
                self.users['category'][user_id] = category
                if user_id in self.users['subcategory']:
                    self.users['subcategory'].delete(user_id)

                self.go_start(bot, call.message)

            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
            if call.data[:4] == "usub":
                subcategory = call.data.split('_')[1]
                self.users['subcategory'][user_id] = subcategory
                self.go_start(bot, call.message)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ
            if call.data[:4] == "show":
                label_id = int(call.data.split('_')[1])
                if int(self.users['status'][user_id]) == 0:
                    self.users['status'][user_id] = label_id
                self.send_full_label(bot, call.message, int(label_id))

            # –ü–æ—Å—ã–ª–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
            if call.data[:3] == "geo":
                label_id = int(call.data.split('_')[1])
                long = float(self.labels['geo_long'][label_id])
                lat = float(self.labels['geo_lat'][label_id])
                bot.send_location(chat_id=call.message.chat.id, longitude=long, latitude=lat)

            # –ú–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–µ
            if call.data[:3] == "abo":
                label_id = int(call.data.split('_')[1])
                self.users['status'][user_id] = label_id
                self.go_about(bot, call.message, label_id)

            # –ú–µ–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if call.data[:3] == "des":
                label_id = int(call.data.split('_')[1])
                self.users['status'][user_id] = label_id
                self.go_description(bot, call.message, label_id)

            # –ú–µ–Ω—è–µ–º —Ü–µ–Ω—É
            if call.data[:3] == "pri":
                label_id = int(call.data.split('_')[1])
                self.users['status'][user_id] = label_id
                self.go_price(bot, call.message, label_id)

            # –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if call.data[:3] == "cat":
                label_id = int(call.data.split('_')[1])
                self.users['status'][user_id] = label_id
                self.go_cat(bot, call.message)

            # –û—Ç–º–µ—á–µ–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
            if call.data[:4] == "lcat":
                cat = call.data.split('_')[1]
                label_id = int(self.users['status'][user_id])
                categories = []
                if label_id in self.labels['subcategory']:
                    categories = json.loads(self.labels['subcategory'][label_id].decode('utf-8'))

                if cat in categories:
                    categories.remove(cat)
                else:
                    categories.append(cat)

                self.labels['subcategory'][label_id] = json.dumps(categories)

                self.go_cat(bot, call.message, False)

            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω—ã
            if call.data[:4] == "done":
                self.users['wait'][user_id] = 0
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                self.go_menu_labels(bot, message=call.message)

            # –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if call.data[:3] == "del":
                label_id = int(call.data.split('_')[1])
                self.labels['status_label'].setex(label_id, 86400, 0)
                self.send_full_label(bot, call.message, label_id, True)

            # –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            if call.data[:3] == "pub":
                label_id = int(call.data.split('_')[1])
                self.labels['status_label'].set(label_id, 1)
                self.send_full_label(bot, call.message, label_id, True)

            bot.answer_callback_query(call.id)

        bot.polling()


if __name__ == "__main__":
    live = Live()
    live.deploy()
