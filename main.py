# coder: Olin (telegram: @whitejoe)
# use for free
# donate bitcoin: 1MFy9M3g6nxFeg8X1GDYabMtYaiuRcYJPT

import psycopg2
import json
import math
import redis
import telebot
from telebot import types
import time
import re
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ADMIN_LIST = [665812965]  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–ø–µ—Ü –∫–æ–º–∞–Ω–¥ (—Ç—É—Ç —Ç–æ–ª—å–∫–æ whitejoe)
ABOUT_LIMIT = 1000  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
SYMBOL = "‚ÇΩ"  # –í–∞–ª—é—Ç–∞ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã
PLANET_RADIUS = 6371  # –†–∞–¥–∏—É—Å —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã
TIME_OUT_USER = 30 * 30 * 24 * 30  # –í—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –µ–≥–æ –º–µ—Ç–æ–∫
CONTENT_TYPES = ["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice", "location", "contact",
                 "new_chat_members", "left_chat_member", "new_chat_title", "new_chat_photo", "delete_chat_photo",
                 "group_chat_created", "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                 "migrate_from_chat_id", "pinned_message"]


# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
def get_distance(lat1, long1, lat2, long2):
    # –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    def hav(x):
        return (math.sin(x / 2)) ** 2

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
    long1_rad = math.pi * long1 / 180
    lat1_rad = math.pi * lat1 / 180
    long2_rad = math.pi * long2 / 180
    lat2_rad = math.pi * lat2 / 180
    # –ú–Ω–æ–≥–æ –≥–µ–æ–º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ—è—Å–Ω—è—Ç—å –Ω–µ –±—É–¥—É.
    res = 2 * PLANET_RADIUS * math.asin(math.sqrt(hav(long2_rad - long1_rad) + math.cos(long1_rad) *
                                                  math.cos(long1_rad) * hav(lat2_rad - lat1_rad)))
    return res


class Space:
    def __init__(self):

        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        redis_url = os.environ['REDIS_URL_SPACE']
        # redis_url = "redis://:@localhost:6379"
        redis_url_snapshot = os.environ['REDIS_URL_SNAPSHOT']

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users = redis.from_url(redis_url, db=1)
        '''
        username
        menu
        parent_menu
        item
        last_login
        message_id
        clean_id
        geo_long
        geo_lat
        category
        subcategory
        search_string
        —Åat_sel
        '''
        self.new_label = redis.from_url(redis_url, db=2)
        '''
        geo_long
        geo_lat
        about
        subcategory_list
        subcategory_list
        '''
        self.my_labels = redis.from_url(redis_url, db=3)
        self.search = redis.from_url(redis_url, db=4)

        # –ü–æ–¥–∫–ª—é—á–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.connection = psycopg2.connect(os.environ['POSTGRES_URL'])
        self.cursor = self.connection.cursor()
        '''
        0 id
        1 about
        2 photos
        3 subcategory 
        4 tags
        5 status_label
        6 geo_lat
        7 geo_long
        8 views
        9 author
        10 zoom
        11 time_added
        12 username
        '''

        # –ü–æ–¥–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        with open("categories.json") as json_file:
            self.categories = json.load(json_file)

        # –°–Ω–µ–ø—à–æ—Ç
        # –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω (–±–µ–∑ –±–∞–∑—ã)
        # today = str(int(time.time()) - int(time.time()) % (3600 * 24))[:-3]
        # redis.from_url(redis_url_snapshot).set('snapshot-' + today, self.snap_data())

        # –ß–∏—Å—Ç–∫–∞ –±–∞–∑—ã
        # –∫–∞–∫–æ–π –±–∞–∑—ã?

    def snap_data(self):
        s_data = []
        query = "SELECT * from labels"
        self.cursor.execute(query)
        while 1:
            row = self.cursor.fetchone()
            if row is None:
                break
            label = {
                    'about': row[1],
                    'subcategory': json.dumps(row[3]),
                    #  'tags': self.labels['tags'][label_id].decode('utf-8'),
                    'geo_lat': row[6],
                    'geo_long': row[7],
                    'views': row[8],
                    'author_tg_username': f"@{row[12]}"
                    }
            s_data.append(label)
        return json.dumps(s_data)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–µ–Ω—é
    def go_menu(self, bot, message, menu_id):
        user_id = message.chat.id
        cur_time = int(time.time())

        user_info = self.users.hgetall(user_id)

        user_info[b'last_login'] = cur_time
        keyboard = types.InlineKeyboardMarkup()

        user_info[b'menu'] = menu_id

        if menu_id == 0:  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.users.hset(user_id, b'parent_menu', menu_id)
            user_info[b'parent_menu'] = menu_id
            user_info[b'item'] = 0
            self.search.delete(user_id)

            user_info[b'search_string'] = ''

            # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            start_menu_items = ['–ö–∞–∫ –∏—Å–∫–∞—Ç—å?', '–ú–æ–∏ –º–µ—Å—Ç–∞',
                                '–£–∫–∞–∑–∞—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                                '–í—ã–±—Ä–∞—Ç—å —Å—Ñ–µ—Ä—É', '–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                                '–ü–æ–∏—Å–∫ –º–µ—Å—Ç']
            keyboard_line = [types.InlineKeyboardButton(text=start_menu_items[0], callback_data=f"go_4"),
                             types.InlineKeyboardButton(text=start_menu_items[1], callback_data=f"go_5")]
            keyboard.row(*keyboard_line)
            keyboard.row(types.InlineKeyboardButton(text=start_menu_items[2], callback_data=f"go_20"))
            keyboard_line = [types.InlineKeyboardButton(text=start_menu_items[3], callback_data=f"go_1")]
            if b'category' in user_info.keys():
                keyboard_line.append(types.InlineKeyboardButton(text=start_menu_items[4], callback_data=f"go_2"))
            keyboard.row(*keyboard_line)
            keyboard.row(types.InlineKeyboardButton(text=start_menu_items[5], callback_data=f"go_6"))
            query = "SELECT  count(*) from labels"
            self.cursor.execute(query)
            count_labels = self.cursor.fetchone()[0]

            message_text = f"–ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ {count_labels}, –ø—Ä–∏–≥–ª–∞—à–∞—é –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É —Ç–∞–º –≤–Ω–∏–∑—É. "
            cat_s = '–í—Å–µ —Å—Ñ–µ—Ä—ã'
            if b'category' in user_info.keys():
                cat_s = user_info[b'category'].decode('utf-8')
            message_text = message_text + f"\nüåé {cat_s}"
            if b'category' in user_info.keys():
                sub_s = '–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
                if b'subcategory' in user_info.keys():
                    sub_s = user_info[b'subcategory'].decode('utf-8')
                message_text = message_text + f"\nüìö {sub_s}"
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 1:  # –í—ã–±–æ—Ä —Å—Ñ–µ—Ä—ã
            for cat in self.categories.keys():
                keyboard.row(types.InlineKeyboardButton(text=cat, callback_data=f"ucat_{cat}"))
            keyboard.row(types.InlineKeyboardButton(text="üåé –í—Å–µ —Å—Ñ–µ—Ä—ã üåé", callback_data=f"dcat"))
            message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 2:  # –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            cat = self.users.hget(user_id, b'category').decode('utf-8')
            for sub in self.categories[cat]:
                keyboard.row(types.InlineKeyboardButton(text=sub, callback_data=f"usub_{sub}"))
            keyboard.row(types.InlineKeyboardButton(text="üìö –í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è üìö", callback_data=f"dsub"))
            message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 3:  # –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ—Å—Ç–∞

            selected_cats = []  # –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞

            temp_label_id = -1
            if int(user_info[b'parent_menu']) == 8:

                sub_list = self.new_label.hget(user_id, b'subcategory_list')
                if sub_list is not None:
                    selected_cats = json.loads(sub_list.decode('utf-8'))
            else:
                temp_label_id = int(self.my_labels.zrevrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])
                query = "SELECT subcategory from labels WHERE id=%s"
                self.cursor.execute(query, (temp_label_id,))
                row = self.cursor.fetchone()
                selected_cats = row[0]

            banned_cats = []  # –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if str(user_id).encode() in self.my_labels.keys():
                user_labels = self.my_labels.zrange(user_id, 0, -1)
                query = "SELECT subcategory from labels WHERE id=%s"
                for label_id in user_labels:
                    if int(label_id) != temp_label_id:
                        self.cursor.execute(query, (int(label_id),))
                        row = self.cursor.fetchone()
                        for cat in row[0]:
                            banned_cats.append(cat)
            keyboard_line = []
            message_text = f"–°–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n–í—ã–±—Ä–∞–Ω–æ {len(selected_cats)}\n"
            if self.users.hexists(user_id, '—Åat_sel'):
                sub_list = self.categories.get(self.users.hget(user_id, '—Åat_sel').decode('utf-8'))
                for sub in sub_list:
                    pre = ""
                    call_st = f"lcat_{sub}"
                    if sub in selected_cats:
                        pre = "‚úÖ "
                    elif sub in banned_cats:
                        pre = "üö´ "
                        call_st = "none"
                    keyboard.row(types.InlineKeyboardButton(text=f"{pre}{sub}", callback_data=call_st))
                keyboard_line.append(types.InlineKeyboardButton(text=f"‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                                                             callback_data=f"rcat"))
            else:
                message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ–π—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
                for cat in self.categories.keys():
                    keyboard.row(types.InlineKeyboardButton(text=f"{cat}", callback_data=f"scat_{cat}"))
            keyboard_line.append(types.InlineKeyboardButton(text=f"‚òëÔ∏è –ì–æ—Ç–æ–≤–æ",
                                                            callback_data=f"go_{int(user_info[b'parent_menu'])}"))
            keyboard.row(*keyboard_line)

            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 4:  # –ü–æ–º–æ—â—å "–∫–∞–∫ –∏—Å–∫–∞—Ç—å?"
            message_text = "–î–∞–≤–∞–π —Ä–∞–∑–±–∏—Ä–∞–π—Å—è —Å–∞–º, —ç—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"
            keyboard.row(types.InlineKeyboardButton(text=f"–°–ø–∞—Å–∏–±–æ",
                                                    callback_data=f"go_{int(user_info[b'parent_menu'])}"))
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 5:  # –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.users.hset(user_id, b'parent_menu', menu_id)
            self.users.hdel(user_id, '—Åat_sel')
            user_info[b'parent_menu'] = menu_id
            item = int(user_info[b'item'])
            self.new_label.delete(user_id)
            menu_edit_items = ['–ö–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Å—Ç–∞‚ùì',
                               '‚ùì', '–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ',
                               'üìù', 'üó∫', 'üì∏', 'üìö', '‚ùå',
                               '‚è™', 'üÜó', '‚è©', 'üîÑ', '‚èÆ']
            keyboard_line = []
            message_text = "–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ –≤–∞—à–∏ –º–µ—Å—Ç–∞, –Ω–æ –ø–æ–∫–∞ –∏—Ö —É –≤–∞—Å –Ω–µ—Ç"
            if str(user_id).encode() in self.my_labels.keys():
                keyboard_line.append(types.InlineKeyboardButton(text=menu_edit_items[1], callback_data=f"go_16"))
                query = "SELECT * from labels WHERE id = %s"
                label_id = int(self.my_labels.zrevrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])

                self.cursor.execute(query, (label_id,))
                row = self.cursor.fetchone()
                message_text = f"üèï {item + 1} –∏–∑ {self.my_labels.zcard(user_id)} –í–∞—à–∏—Ö –º–µ—Å—Ç:\n\n" \
                               f"üìù {row[1]}\nüÜî {row[0]}\nüìö {','.join(row[3])}\nüëÄ {row[8]}"

            else:
                keyboard.row(types.InlineKeyboardButton(text=menu_edit_items[0], callback_data=f"go_16"))

            keyboard_line.append(types.InlineKeyboardButton(text=menu_edit_items[2], callback_data=f"go_8"))

            keyboard.row(*keyboard_line)
            if str(user_id).encode() in self.my_labels.keys():
                keyboard_line = [types.InlineKeyboardButton(text=menu_edit_items[3], callback_data=f"go_14"),
                                 types.InlineKeyboardButton(text=menu_edit_items[4], callback_data=f"go_20"),
                                 types.InlineKeyboardButton(text=menu_edit_items[5], callback_data=f"go_13"),
                                 types.InlineKeyboardButton(text=menu_edit_items[6], callback_data=f"go_3"),
                                 types.InlineKeyboardButton(text=menu_edit_items[7], callback_data=f"go_15")]
                keyboard.row(*keyboard_line)
            keyboard_line = []

            if item > 0:
                keyboard_line.append(types.InlineKeyboardButton(text=menu_edit_items[8],
                                                                callback_data=f"select_{item-1}"))
            else:
                keyboard_line.append(types.InlineKeyboardButton(text=menu_edit_items[12],
                                                                callback_data=f"none"))
            keyboard_line.append(types.InlineKeyboardButton(text=menu_edit_items[9], callback_data=f"go_0"))
            if str(user_id).encode() in self.my_labels.keys():

                if item < self.my_labels.zcard(user_id) - 1:
                    keyboard_line.append(types.InlineKeyboardButton(text=menu_edit_items[10],
                                                                    callback_data=f"select_{item+1}"))
                else:
                    keyboard_line.append(types.InlineKeyboardButton(text=menu_edit_items[11],
                                                                    callback_data=f"select_0"))
            keyboard.row(*keyboard_line)

            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 6:  # –ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            self.users.hset(user_id, b'parent_menu', menu_id)
            user_info[b'parent_menu'] = menu_id
            menu_search_items = ['üöï‚û°Ô∏è‚õ∫Ô∏è', '‚¨ÖÔ∏èüöï‚õ∫Ô∏è',
                                 'üó∫ –ö–∞—Ä—Ç–∞', '–§–æ—Ç–æ üì∏',
                                 '‚è™', 'üÜó', '‚è©', 'üîÑ', '‚èÆ']
            if str(user_id).encode() not in self.search.keys():
                self.do_search(message)
                user_info[b'item'] = 0
                try:
                    bot.delete_message(chat_id=message.chat.id, message_id=int(user_info[b'message_id']))
                except Exception as error:
                    print("Error del message: ", error)

            message_text = "ü§∑‚Äç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –Ω–∞–ø–æ–ª–Ω—è—Ç—å—Å—è."
            if str(user_id).encode() in self.search.keys():

                item = int(user_info[b'item'])
                query = "SELECT * from labels WHERE id=%s"

                label_id = int(self.search.zrange(user_id, 0, -1)[item])
                self.cursor.execute(query, (label_id,))
                row = self.cursor.fetchone()
                message_text = f"üèï {item + 1} –∏–∑ {self.search.zcard(user_id)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞\n"
                if b'category' in user_info.keys():
                    message_text = message_text + f"üåé {user_info[b'category'].decode('utf-8')}\n"
                if b'subcategory' in user_info.keys():
                    message_text = message_text + f"üìö {user_info[b'subcategory'].decode('utf-8')}\n"
                search_s = user_info[b'search_string'].decode('utf-8')
                if len(search_s) > 0:
                    message_text = message_text + f"üìñ '{search_s}' (–ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)\n"
                message_text = message_text + f"\nüìù {row[1]}\nüÜî {row[0]}\nüìö {','.join(row[3])}\nüëÄ {row[8]}\n" \
                                              f"üöô {float(self.search.zscore(user_id, label_id))/1000:.1f} –∫–º\n" \
                                              f"üí¨ @{self.users.hget(row[9], b'username').decode('utf-8')}"

                keyboard_line = [types.InlineKeyboardButton(text=menu_search_items[0], callback_data=f"go_13"),
                                 types.InlineKeyboardButton(text=menu_search_items[1], callback_data=f"go_13")]
                keyboard.row(*keyboard_line)
                keyboard_line = [types.InlineKeyboardButton(text=menu_search_items[2], callback_data=f"go_10"),
                                 types.InlineKeyboardButton(text=menu_search_items[3], callback_data=f"go_13")]
                keyboard.row(*keyboard_line)
                keyboard_line = []
                if item > 0:
                    keyboard_line.append(types.InlineKeyboardButton(text=menu_search_items[4],
                                                                    callback_data=f"select_{item - 1}"))
                else:
                    keyboard_line.append(types.InlineKeyboardButton(text=menu_search_items[8],
                                                                    callback_data=f"none"))
                keyboard_line.append(types.InlineKeyboardButton(text=menu_search_items[5], callback_data=f"go_0"))
                if item < self.search.zcard(user_id) - 1:
                    keyboard_line.append(types.InlineKeyboardButton(text=menu_search_items[6],
                                                                    callback_data=f"select_{item + 1}"))
                else:
                    keyboard_line.append(types.InlineKeyboardButton(text=menu_search_items[7],
                                                                    callback_data=f"select_0"))
                keyboard.row(*keyboard_line)
            else:
                keyboard.row(types.InlineKeyboardButton(text=menu_search_items[5], callback_data=f"go_0"))

            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 7:  # –ó–∞–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
            bot.delete_message(chat_id=message.chat.id, message_id=int(user_info[b'message_id']))
            geo_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            geo_keyboard.row(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
            message_text = "–û—Ö, –±–æ–∂–µ, –∫–∞–∫ —á–∞—Å—Ç–æ —è —ç—Ç–æ –ø–∏—à—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏... –ö–æ—Ä–æ—á–µ, –µ—Å–ª–∏ –≤—ã —Å–∏–¥–∏—Ç–µ —Å –∫–æ–º–ø–∞," \
                           " –∞ –º–æ–∂–µ—Ç –±–æ–∏—Ç–µ—Å—å –≤–∫–ª—é—á–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –≤–æ–æ–±—â–µ —É –≤–∞—Å –∫–∞–º–µ—Ä–∞ –∑–∞–ª–µ–ø–ª–µ–Ω–∞ –∏–∑–æ–ª–µ–Ω—Ç–æ–π " \
                           "–∏–ª–∏ –≤–∞—à–µ –∏–º—è –ê–Ω—Ç–æ–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). " \
                           "–ò–Ω–∞—á–µ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞–∂–∞–≤ –Ω–∞ üìé –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫—É."

            user_info[b'message_id'] = int(user_info[b'message_id']) + 1
            user_info[b'parent_menu'] = 0
            bot.send_message(user_id, message_text, reply_markup=geo_keyboard)

        elif menu_id == 8:  # –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞
            if message.chat.username is not None:
                self.users.hset(user_id, b'username', message.chat.username)
                self.users.hset(user_id, b'parent_menu', menu_id)
                self.users.hdel(user_id, '—Åat_sel')
                user_info[b'parent_menu'] = menu_id
                if str(user_id).encode() not in self.new_label.keys():
                    self.new_label.hset(user_id, b'geo_lat', self.users.hget(user_id, b'geo_lat'))
                    self.new_label.hset(user_id, b'geo_long', self.users.hget(user_id, b'geo_long'))
                can_create = self.new_label.hexists(user_id, 'about') and \
                             self.new_label.hexists(user_id, 'subcategory_list')
                menu_new_label_items = ['üìù', 'üó∫', 'üì∏', 'üìö',
                                        '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', '‚ùå']
                about_text = f"‚ÄºÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (üìù), –ª–∏–º–∏—Ç {ABOUT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤ ‚ÄºÔ∏è"
                if self.new_label.hexists(user_id, 'about'):
                    about_text = self.new_label.hget(user_id, 'about').decode('utf-8')

                cat_text = "‚ÄºÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (üìö) ‚ÄºÔ∏è"
                if self.new_label.hexists(user_id, 'subcategory_list'):
                    cat_text = ','.join(json.loads(self.new_label.hget(user_id,
                                                                       'subcategory_list').decode('utf-8')))
                message_text = f"–û–ø–∏—Å–∞–Ω–∏–µ üìù: {about_text}\n\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è üìö: {cat_text}"
                keyboard_line = [types.InlineKeyboardButton(text=menu_new_label_items[0], callback_data=f"go_14"),
                                 types.InlineKeyboardButton(text=menu_new_label_items[1], callback_data=f"go_20"),
                                 types.InlineKeyboardButton(text=menu_new_label_items[2], callback_data=f"go_13"),
                                 types.InlineKeyboardButton(text=menu_new_label_items[3], callback_data=f"go_3")]
                keyboard.row(*keyboard_line)
                keyboard_line = []
                if can_create:
                    keyboard_line.append(types.InlineKeyboardButton(text=menu_new_label_items[4],
                                                                    callback_data=f"go_9"))
                keyboard_line.append(types.InlineKeyboardButton(text=menu_new_label_items[5], callback_data=f"go_5"))
                keyboard.row(*keyboard_line)
                try:
                    bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                          text=message_text, reply_markup=keyboard)
                except Exception as error:
                    print("Error: ", error)
                    bot.send_message(user_id, message_text, reply_markup=keyboard)
            else:
                message_text = f"‚ÄºÔ∏è –ó–∞–¥–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Telegram," \
                               f" —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –í–∞–º –≥–æ—Å—Ç–µ–π –∏ –∂–∏—Ç–µ–ª–µ–π –¥–æ–ª–∏–Ω—ã ‚ÄºÔ∏è –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–π–¥–∏—Ç–µ –≤" \
                               f" –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å' –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ" \
                               f" –ø–æ–ª–µ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'."
                keyboard.row(
                    types.InlineKeyboardButton(text=f"‚òëÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data=f"go_{int(user_info[b'parent_menu'])}"))
                try:
                    bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                          text=message_text, reply_markup=keyboard)
                except Exception as error:
                    print("Error: ", error)
                    bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 9:  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Å—Ç–∞
            user_info[b'item'] = 0
            message_text = " ü•≥ –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ Belbek.Space ! üéä"

            query = "INSERT INTO labels (about, subcategory, geo_lat, geo_long, author, time_added, username) " \
                    "VALUES (%s, %s, %s, %s, %s, %s, %s)"
            self.cursor.execute(query, (self.new_label.hget(user_id, b'about').decode('utf-8'),
                                        json.loads(self.new_label.hget(user_id,
                                                                       b'subcategory_list').decode('utf-8')),
                                        float(self.new_label.hget(user_id, b'geo_lat')),
                                        float(self.new_label.hget(user_id, b'geo_long')),
                                        user_id,
                                        cur_time,
                                        self.users.hget(user_id, b'username').decode('utf-8')))

            self.connection.commit()

            query = "SELECT LASTVAL()"
            self.cursor.execute(query)
            row = self.cursor.fetchone()
            label_id = row[0]
            self.my_labels.zadd(user_id, {label_id: cur_time})

            keyboard.row(types.InlineKeyboardButton(text="–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", callback_data=f"go_5"))
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 10:  # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
            bot.delete_message(chat_id=message.chat.id, message_id=int(user_info[b'message_id']))
            label_id = int(self.search.zrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])
            query = "SELECT geo_lat, geo_long from labels WHERE id=%s"

            self.cursor.execute(query, (label_id,))
            row = self.cursor.fetchone()

            lat = row[0]
            long = row[1]

            keyboard.row(types.InlineKeyboardButton(text="OK", callback_data=f"dgo_{int(user_info[b'parent_menu'])}"))
            bot.send_location(chat_id=message.chat.id, longitude=long, latitude=lat, reply_markup=keyboard)

        elif menu_id == 11:  # –ü–æ–∫–∞–∑ —Ç–∞–∫—Å–∏
            pass

        elif menu_id == 12:  # –ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Ç–∞–∫—Å–∏
            pass

        elif menu_id == 13:  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            message_text = "–≠—Ç–∞ —á–∞—Å—Ç—å –±–æ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å"
            keyboard.row(types.InlineKeyboardButton(text=f"–ö–æ–Ω–µ—á–Ω–æ, —è –ø–æ–¥–æ–∂–¥—É, —Å–ø–∞—Å–∏–±–æ",
                                                    callback_data=f"go_{int(user_info[b'parent_menu'])}"))
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 14:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Å—Ç–∞
            message_text = f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–∞:\n\nüìù "

            if int(self.users.hget(user_id, b'parent_menu')) == 5:
                label_id = int(self.my_labels.zrevrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])
                query = "SELECT about from labels WHERE id = %s"
                self.cursor.execute(query, (label_id,))
                row = self.cursor.fetchone()
                message_text = message_text + row[0]

            elif int(self.users.hget(user_id, b'parent_menu')) == 8:

                if self.new_label.hexists(user_id, b'about'):
                    message_text = message_text + self.new_label.hget(user_id, b'about').decode('utf-8')
                else:
                    message_text = message_text + " ü§∑üèΩ –ø—É—Å—Ç–æ!  "

            message_text = message_text + "\n\n –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'"

            keyboard.row(types.InlineKeyboardButton(text=f"‚òëÔ∏è –ì–æ—Ç–æ–≤–æ",
                                                    callback_data=f"go_{int(user_info[b'parent_menu'])}"))
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 15:  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            message_text = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ ‚ùå —É–±—Ä–∞—Ç—å ‚ùå —ç—Ç–æ –º–µ—Å—Ç–æ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–æ—Å–º–æ—Å–∞?"
            keyboard.row(types.InlineKeyboardButton(text="–ù–µ—Ç, –ø—É—Å—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è üëç",
                                                    callback_data=f"go_{int(user_info[b'parent_menu'])}"))
            keyboard.row(types.InlineKeyboardButton(text="–î–∞, —É–±–∏—Ä–∞—é üëé", callback_data=f"del_label"))

            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 16:  # –ü–æ–º–æ—â—å "–∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –º–µ—Å—Ç–æ?"
            message_text = "–¢—ã —Å–º–æ–∂–µ—à—å, —è –≤ —Ç–µ–±—è –≤–µ—Ä—é!"
            wtf_label = " –ú–µ—Å—Ç–æ ‚ú≥Ô∏è - —ç—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è" \
                        " –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥." \
                        " –ù–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ö–ª–µ–±–∞, —Å–¥–∞–≤–∞–µ–º–∞—è –≤ –∞—Ä–µ–Ω–¥—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å," \
                        " —Å—Ç—É–¥–∏—è –º–∞—Å—Å–∞–∂–∞, –∏–ª–∏, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É" \
                        " –≤–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –¥–æ–ª–∏–Ω–µ, –º–µ—Å—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –≠—Ç–∞ —Ç–æ—á–∫–∞ –±—É–¥–µ—Ç" \
                        " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –≤–∞–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" \
                        " –æ —Ç–æ–º, –∏–∑ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –¥–æ–ª–∏–Ω—ã –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞." \
                        " –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ' –∏ –í—ã –ø–µ—Ä–µ—ë–¥—ë—Ç–µ –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Å—Ç–∞. " \
                        "  —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –º–µ—Ç–∫—É —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É" \
                        " '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é' (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞)" \
                        " –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –º–µ—Å—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–∫—É." \
                        " –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ, —É–∫–∞–∂–∏—Ç–µ" \
                        " –Ω–∞–∑–∞–≤–Ω–∏–µ –∏ –¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–∫–∏. –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)," \
                        " –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞—à–∞ –º–µ—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–µ—Ä–≤–∏—Å–∞." \
                        " –í –∫–∞–∂–¥–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –º–µ—Ç–∫–∏. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏ –≤—ã" \
                        " –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, —Ç–∞–∫–∏–µ –∫–∞–∫ '–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ' –∏–ª–∏ '—Ü–µ–Ω–∞'. –î–∞–ª–µ–µ" \
                        " –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ—Ç–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏" \
                        " —Å–Ω–∏–º–∏–µ –µ—ë —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–Ω–∞ —É–¥–∞–ª–∏—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏."
            keyboard.row(
                types.InlineKeyboardButton(text=f"–°–ø–∞—Å–∏–±–æ, –î–∂–æ, –æ—á–µ–Ω—å –ø–æ–º–æ–≥!",
                                           callback_data=f"go_{int(user_info[b'parent_menu'])}"))
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)
        elif menu_id == 17:  #
            pass
        elif menu_id == 18:  #
            pass
        elif menu_id == 19:  #
            pass
        elif menu_id == 20:  # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Ç–µ–∫—É—â–∞—è
            try:
                bot.delete_message(chat_id=message.chat.id, message_id=int(user_info[b'message_id']))
            except Exception as error:
                print("Error del geo-request message: ", error)

            if int(user_info[b'parent_menu']) == 5:
                button_text = "–î–∞, —ç—Ç–æ –∑–¥–µ—Å—å"
                label_id = int(self.my_labels.zrevrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])
                query = "SELECT geo_lat, geo_long from labels WHERE id=%s"
                self.cursor.execute(query, (label_id,))
                row = self.cursor.fetchone()
                lat = row[0]
                long = row[1]
            elif int(user_info[b'parent_menu']) == 8:
                button_text = "–î–∞, —ç—Ç–æ –∑–¥–µ—Å—å"
                lat = self.new_label.hget(user_id, b'geo_lat')
                long = self.new_label.hget(user_id, b'geo_long')
            else:
                lat = float(user_info[b'geo_lat'])
                long = float(user_info[b'geo_long'])
                button_text = "–î–∞, —è –∑–¥–µ—Å—å"

            keyboard.row(types.InlineKeyboardButton(text=button_text, callback_data=f"dgo_23"))
            keyboard.row(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"dgo_21"))
            bot.send_location(chat_id=message.chat.id, longitude=long, latitude=lat, reply_markup=keyboard)

        elif menu_id == 21:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –ª–æ–∫–∞—Ü–∏–∏
            message_text = "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"
            keyboard.row(types.InlineKeyboardButton(text=f"–•–æ—Ä–æ—à–æ", callback_data=f"go_22"))
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        elif menu_id == 22:  # –°–º–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
            bot.delete_message(chat_id=message.chat.id, message_id=int(user_info[b'message_id']))
            geo_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            geo_keyboard.row(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True))
            message_text = "–û—Ö...–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) " \
                           "–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞–∂–∞–≤ –Ω–∞ üìé –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫—É. –ê –µ—â–µ –Ω–∞–∂–º–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            user_info[b'message_id'] = int(user_info[b'message_id']) + 1
            bot.send_message(user_id, message_text, reply_markup=geo_keyboard)

        elif menu_id == 23:  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏
            message_text = "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ–∂–¥–µ–Ω–∞"
            keyboard.row(types.InlineKeyboardButton(text=f"–û–∫", callback_data=f"go_{int(user_info[b'parent_menu'])}"))
            try:
                bot.edit_message_text(chat_id=user_id, message_id=int(user_info[b'message_id']),
                                      text=message_text, reply_markup=keyboard)
            except Exception as error:
                print("Error: ", error)
                bot.send_message(user_id, message_text, reply_markup=keyboard)

        # print(user_info)
        self.users.delete(user_id)
        for key, val in user_info.items():
            self.users.hset(user_id, key, val)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞
    def do_search(self, message):

        user_id = message.chat.id
        user_info = self.users.hgetall(user_id)
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏

        # –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É –ø–æ–ø–æ–∑–∂–µ –±—É–¥–µ—Ç
        query = "SELECT * from labels"  # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–≤–µ—Å—Ç–∏ –∏ –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É!
        self.cursor.execute(query)
        while 1:
            row = self.cursor.fetchone()
            if row is None:
                break

            label_id = row[0]
            # —ç—Ç–æ –≥–æ–≤–Ω–æ–∫–æ–¥ —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–π –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∑–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –≤ –±–¥ –µ—â–µ –Ω–µ –æ—Å–≤–æ–∏–ª
            # –∫–æ—Ä–æ—á–µ, –ø–µ—Ä–µ–¥–µ–ª–∞—é –ø–æ—Ç–æ–º, –∞ –ø–æ–∫–∞ —Ç–∞–∫
            label_cat_list = []
            label_sub_list = row[3]

            for label_sub in label_sub_list:
                for cat, sub_list in self.categories.items():
                    if label_sub in sub_list:
                        label_cat_list.append(cat)
            if b'category' not in user_info.keys() or user_info[b'category'].decode('utf-8') in label_cat_list:
                if b'subcategory' not in user_info.keys() or \
                        user_info[b'subcategory'].decode('utf-8') in label_sub_list:
                    dist = int(1000*get_distance(float(user_info[b'geo_lat']),
                                                      float(user_info[b'geo_long']),
                                                      row[6], row[7]))
                    self.search.zadd(user_id, {label_id: dist})

    # –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–º –∏–ª–∏ –∏–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    def go_location(self, bot, message, location):
        user_id = message.chat.id
        if int(self.users.hget(user_id, b'menu')) in [7, 22]:
            if int(self.users.hget(user_id, b'parent_menu')) == 5:
                label_id = int(self.my_labels.zrevrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])

                query = "UPDATE labels SET geo_lat = %s, geo_long = %s WHERE id = %s"
                self.cursor.execute(query, (location['latitude'], location['longitude'], label_id))
                self.connection.commit()
            elif int(self.users.hget(user_id, b'parent_menu')) == 8:
                self.new_label.hset(user_id, b'geo_lat', location['latitude'])
                self.new_label.hset(user_id, b'geo_long', location['longitude'])
            else:
                self.users.hset(user_id, b'geo_lat', location['latitude'])
                self.users.hset(user_id, b'geo_long', location['longitude'])
            self.go_menu(bot, message, 20)

    def service(self):
        for b_user_id in self.my_labels.keys():
            self.my_labels.delete(b_user_id)

        query_sel = "SELECT id, time_added, author from labels"
        self.cursor.execute(query_sel)
        while 1:
            row_res = self.cursor.fetchone()
            if row_res is None:
                break
            self.my_labels.zadd(int(row_res[2]), {row_res[0]: row_res[1]})

    def deploy(self):
        self.service()
        bot = telebot.TeleBot(os.environ['TELEGRAM_TOKEN_SPACE'])

        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        @bot.message_handler(commands=['start'])
        def start_message(message):
            user_id = message.chat.id
            try:
                bot.delete_message(chat_id=message.chat.id,
                                   message_id=int(self.users.hget(int(user_id), b'message_id')))
            except Exception as e:
                print("Error: ", e)
            for i in range(3):
                try:
                    bot.delete_message(chat_id=message.chat.id, message_id=i)
                except Exception as e:
                    print("Error: ", e)

            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            welcome_text = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, %USERNAME%! –¢—É—Ç –±—É–¥–µ—Ç –∫—Ä–∞—Å–æ—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ," \
                           f" –Ω–æ —Å–µ–π—á–∞—Å –∂–µ —Ç—ã –Ω–µ —Ä–µ—á–∏ —Å–ª—É—à–∞—Ç—å –ø—Ä–∏—à–µ–ª? –î–∞–≤–∞–π —Ç–µ—Å—Ç–∏—Ç—å!"
            keyboard = types.InlineKeyboardMarkup()
            self.users.hset(user_id, b'menu', -1)

            keyboard.row(types.InlineKeyboardButton(text=f"–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º!", callback_data=f"go_7"))
            bot.send_message(user_id, welcome_text, reply_markup=keyboard)

        # –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞
        @bot.message_handler(commands=['cancel'])
        def cancel_message(message):
            user_id = message.chat.id
            if int(self.users.hget(user_id, b'menu')) == 22:
                self.go_menu(bot, message, 20)
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        @bot.message_handler(content_types=['text'])
        def message_text(message):
            user_id = message.chat.id

            # –í–≤–µ–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            if int(self.users.hget(user_id, b'menu')) == 0:
                self.users.hset(user_id, b'search_string', message.text)
                self.go_menu(bot, message, 6)

            # –í–≤–µ–¥–µ–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
            if int(self.users.hget(user_id, b'menu')) == 14:
                about = message.text[:ABOUT_LIMIT]
                if int(self.users.hget(user_id, b'parent_menu')) == 5:

                    label_id = int(self.my_labels.zrevrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])
                    query = "UPDATE labels SET about = %s WHERE id = %s"
                    self.cursor.execute(query, (about, label_id))
                    self.connection.commit()
                elif int(self.users.hget(user_id, b'parent_menu')) == 8:
                    self.new_label.hset(user_id, b'about', about)
                try:
                    bot.delete_message(chat_id=message.chat.id,
                                       message_id=int(self.users.hget(user_id, b'message_id')))
                except Exception as e:
                    print("Error: ", e)
                self.go_menu(bot, message, 14)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–∫—Å—Ç–æ–º
            if re.fullmatch("^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$", message.text):
                location = {'latitude': float(message.text.split(',')[0]),
                            'longitude': float(message.text.split(',')[1])}
                self.go_location(bot, message, location)

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        @bot.message_handler(content_types=['location'])
        def message_geo(message):
            location = {'longitude': message.location.longitude, 'latitude': message.location.latitude}
            self.go_location(bot, message, location)
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
        @bot.message_handler(content_types=CONTENT_TYPES)
        def message_any(message):
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        @bot.callback_query_handler(func=lambda call: True)
        def callback_worker(call):
            user_id = call.message.chat.id

            # –§–∏–∫—Å–∏—Ä—É–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            self.users.hset(user_id, b'message_id', call.message.message_id)  # –§–∏–∫—Å–∏—Ä—É–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

            # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not self.users.hexists(user_id, b'clean_id'):
                self.users.hset(user_id, b'clean_id', call.message.message_id - 1)

            message_id_clean = int(self.users.hget(user_id, b'clean_id'))
            while message_id_clean < call.message.message_id - 1:
                message_id_clean += 1
                try:
                    bot.delete_message(chat_id=call.message.chat.id, message_id=message_id_clean)
                except Exception as e:
                    print("Error: ", e)
            self.users.hset(user_id, b'clean_id', call.message.message_id - 1)  # –§–∏–∫—Å–∏—Ä—É–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

            # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            if call.data[:2] == "go":
                self.go_menu(bot, call.message, int(call.data.split('_')[1]))

            # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if call.data[:3] == "dgo":
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                self.go_menu(bot, call.message, int(call.data.split('_')[1]))

            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ñ–µ—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
            if call.data[:4] == "ucat":
                category = call.data.split('_')[1]
                self.users.hdel(user_id, b'subcategory')
                self.users.hset(user_id, b'category', category)
                self.go_menu(bot, call.message, int(self.users.hget(user_id, b'parent_menu')))

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ñ–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            if call.data == "dcat":
                self.users.hdel(user_id, b'category')
                self.users.hdel(user_id, b'subcategory')
                self.go_menu(bot, call.message, int(self.users.hget(user_id, b'parent_menu')))

            # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            if call.data[:4] == "usub":
                subcategory = call.data.split('_')[1]
                self.users.hset(user_id, b'subcategory', subcategory)
                self.go_menu(bot, call.message, int(self.users.hget(user_id, b'parent_menu')))

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            if call.data == "dsub":
                self.users.hdel(user_id, b'subcategory')
                self.go_menu(bot, call.message, int(self.users.hget(user_id, b'parent_menu')))

            # –í—ã–±—Ä–∞–Ω item
            if call.data[:6] == "select":
                new_item = int(call.data.split('_')[1])
                self.users.hset(user_id, b'item', new_item)
                self.go_menu(bot, call.message, int(self.users.hget(user_id, b'parent_menu')))

            # –û—Ç–º–µ—á–µ–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
            if call.data[:4] == "lcat":
                cat = call.data.split('_')[1]

                categories = []  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —É –º–µ—Ç–∫–∏
                if int(self.users.hget(user_id, b'parent_menu')) == 5:

                    label_id = int(self.my_labels.zrevrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])
                    query = "SELECT subcategory FROM labels WHERE id = %s"
                    self.cursor.execute(query, (label_id,))
                    row = self.cursor.fetchone()
                    categories = row[0]
                elif int(self.users.hget(user_id, b'parent_menu')) == 8:
                    if self.new_label.hexists(user_id, b'subcategory_list'):
                        categories = json.loads(self.new_label.hget(user_id,
                                                                    b'subcategory_list').decode('utf-8'))

                if cat in categories:
                    categories.remove(cat)
                else:
                    categories.append(cat)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                if int(self.users.hget(user_id, b'parent_menu')) == 5:
                    if len(categories) > 0:

                        label_id = int(self.my_labels.zrevrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])
                        query = "UPDATE labels SET subcategory = %s WHERE id = %s"
                        self.cursor.execute(query, (categories, label_id))
                        self.connection.commit()
                elif int(self.users.hget(user_id, b'parent_menu')) == 8:
                    if len(categories) > 0:
                        self.new_label.hset(user_id, b'subcategory_list', json.dumps(categories))
                    else:
                        self.new_label.hdel(user_id, b'subcategory_list')

                self.go_menu(bot, call.message, 3)

            if call.data == "rcat":
                self.users.hdel(user_id, '—Åat_sel')
                self.go_menu(bot, call.message, 3)

            if call.data[:4] == "scat":
                sel_category = call.data.split('_')[1]
                self.users.hset(user_id, '—Åat_sel', sel_category)
                self.go_menu(bot, call.message, 3)

            if call.data == "del_label":
                # –£–¥–∞–ª—è—é –º–µ—Å—Ç–æ –∏–∑ –±–∞–∑—ã –∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                label_id = int(self.my_labels.zrevrange(user_id, 0, -1)[int(self.users.hget(user_id, b'item'))])
                query = "DELETE FROM labels WHERE id = %s"
                self.cursor.execute(query, (label_id,))
                self.connection.commit()
                if self.my_labels.zcard(user_id) == 1:
                    self.my_labels.delete(user_id)
                else:
                    self.my_labels.zrem(user_id, label_id)
                self.users.hset(user_id, b'item', 0)
                self.go_menu(bot, call.message, int(self.users.hget(user_id, b'parent_menu')))

            bot.answer_callback_query(call.id)

        bot.polling()
        #try:
        #    bot.polling()
        #except Exception as error:
        #    print("Error polling: ", error)


if __name__ == "__main__":
    space = Space()
    space.deploy()
