# coder: Olin (telegram: @whitejoe)
# use for free
# donate bitcoin: 1MFy9M3g6nxFeg8X1GDYabMtYaiuRcYJPT

import math
import redis
import time
import datetime
import os
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Ç–æ–∫–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
REDIS_URL = os.environ['REDIS_URL']

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SYMBOL = "‚ÇΩ"  # –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã —Ç–µ–∫—É—â–µ–π –¥–µ–Ω–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
PLANET_RADIUS = 6371  # –†–∞–¥–∏—É—Å —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã –≤ –∫–º, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.5%
ABOUT_LIMIT = 300  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏


class SpaceTaxi:
    def __init__(self):
        redis_url = REDIS_URL
        # redis_url = 'redis://:@localhost:6379'  # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        self.drivers = {'about': redis.from_url(redis_url, db=1),
                        'radius': redis.from_url(redis_url, db=2),
                        'price': redis.from_url(redis_url, db=3),
                        'wait': redis.from_url(redis_url, db=4),
                        'status': redis.from_url(redis_url, db=5),
                        'geo_long': redis.from_url(redis_url, db=6),
                        'geo_lat': redis.from_url(redis_url, db=7),
                        'impressions': redis.from_url(redis_url, db=8),
                        'last_impression': redis.from_url(redis_url, db=9),
                        'views': redis.from_url(redis_url, db=10),
                        'name': redis.from_url(redis_url, db=11),
                        'username': redis.from_url(redis_url, db=12)}

        # –ü–æ–¥–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
        with open("geo_dolina.json") as json_file:
            self.points = json.load(json_file)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    @staticmethod
    def get_distance(lat1, long1, lat2, long2):
        # –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
        def hav(x):
            return (math.sin(x / 2)) ** 2

        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
        long1_rad = math.pi * long1 / 180
        lat1_rad = math.pi * lat1 / 180
        long2_rad = math.pi * long2 / 180
        lat2_rad = math.pi * lat2 / 180
        # –ú–Ω–æ–≥–æ –≥–µ–æ–º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ—è—Å–Ω—è—Ç—å –Ω–µ –±—É–¥—É.
        res = 2 * PLANET_RADIUS * math.asin(math.sqrt(hav(long2_rad - long1_rad) + math.cos(long1_rad) *
                                                      math.cos(long1_rad) * hav(lat2_rad - lat1_rad)))
        return res

    # –§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É –≤–æ–¥–∏—Ç–µ–ª—è
    def inc_impression(self, user_driver):
        current_time = int(time.time())
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –¥–∞—Ç –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ
        dt_timestamp = int(datetime.datetime.combine(datetime.date.today(), datetime.time(0, 0, 0)).timestamp())
        if user_driver not in self.drivers['last_impression'] or int(
                self.drivers['last_impression'][user_driver]) < dt_timestamp:
            self.drivers['impressions'][user_driver] = 0
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω—è
        self.drivers['impressions'][user_driver] = int(self.drivers['impressions'][user_driver]) + 1
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—â–∏–π
        self.drivers['views'][user_driver] = int(self.drivers['views'][user_driver]) + 1
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.drivers['last_impression'][user_driver] = current_time

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    def go_search(self, location, is_delivery=False):
        result_message = ''

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        geo = {}
        for user_driver_ne in self.drivers['status'].keys():
            user_driver = int(user_driver_ne)
            # –ù–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—É–µ ("–≤ –ø–æ–∏—Å–∫–µ")
            if int(self.drivers['status'][user_driver]) == 1:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–æ–¥–∏—Ç–µ–ª—è
                dist = self.get_distance(location['latitude'], location['longitude'],
                                         float(self.drivers['geo_lat'][user_driver]),
                                         float(self.drivers['geo_long'][user_driver])
                                         )
                # –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —Ä—è–¥–æ–º, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
                if dist < int(self.drivers['radius'][user_driver]):
                    geo[user_driver] = dist

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º
        sorted_list = sorted(geo, key=geo.get)
        for user_driver in sorted_list:
            dist = geo[user_driver]
            result_message = result_message + f"üöñ {self.drivers['about'][user_driver].decode('utf-8')}\n" \
                                              f"üöï {dist:.2f} –∫–º\n" \
                                              f"üí∞ {int(self.drivers['price'][user_driver])} {SYMBOL}/–∫–º\n" \
                                              f"üí¨ @{self.drivers['username'][user_driver].decode('utf-8')}\n\n"
            # –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –Ω–µ–¥–∞–≤–Ω–µ–º –ø–æ–∏—Å–∫–µ, —Ç–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞–µ–º –µ–º—É —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            self.inc_impression(user_driver)

        s_count = len(sorted_list)
        m_text = "ü§∑‚Äç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –†—è–¥–æ–º –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π, –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ."
        if s_count > 0:
            m_text = f"–ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Ä—è–¥–æ–º —Å –í–∞–º–∏: {s_count}\n\n{result_message}" \
                     f"üí¨ –ú–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –Ω–∏–º –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–µ." \
                     " –ü—Ä–∏—è—Ç–Ω–æ–π –¥–æ—Ä–æ–≥–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏—Å—Ç–µ–≥–Ω—É—Ç—å —Ä–µ–º–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
            if is_delivery:
                m_text = f"–ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Ä—è–¥–æ–º —Å –º–µ—Å—Ç–æ–º: {s_count}\n\n{result_message}" \
                         f"üí¨ –ú–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –Ω–∏–º –æ –¥–æ—Å—Ç–∞–≤–∫–µ."

        return m_text
